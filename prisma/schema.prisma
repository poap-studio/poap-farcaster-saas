generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  fid          Int?     @unique
  username     String
  displayName  String?
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  email        String?  @unique
  googleId     String?  @unique
  provider     String   @default("farcaster")
  drops        Drop[]
}

model Drop {
  id                String   @id @default(cuid())
  slug              String   @unique @default(cuid())
  userId            String
  poapEventId       String
  poapSecretCode    String
  buttonColor       String   @default("#0a5580")
  backgroundColor   String   @default("#073d5c")
  logoUrl           String?
  mintMessage       String   @default("This POAP celebrates the Farcaster community and our journey together.")
  requireFollow     Boolean  @default(true)
  followUsername    String?
  requireRecast     Boolean  @default(true)
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  disclaimerMessage String   @default("By minting this POAP you accept these terms: https://poap.xyz/terms")
  requireQuote      Boolean  @default(false)
  platform          String   @default("farcaster")
  lumaEventId       String?
  deliveryMethod    String?
  lumaEventUrl      String?
  emailSubject      String?
  emailBody         String?
  deliveryTarget    String   @default("email")
  poapsDelivered    Boolean  @default(false)
  deliveredAt       DateTime?
  // Instagram fields
  instagramAccountId String?
  instagramStoryId   String?
  instagramStoryUrl  String?  @db.Text
  instagramMessages  InstagramDropMessages?
  acceptedFormats    String[] @default(["email"]) // ["email", "ens", "address"]
  sendPoapEmail      Boolean  @default(true) // Whether POAP should send email when minting
  claims            Claim[]
  lumaDeliveries    LumaDelivery[]
  lumaGuests        LumaGuest[]
  instagramDeliveries InstagramDelivery[]
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  instagramAccount  InstagramAccount? @relation(fields: [instagramAccountId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([slug])
  @@index([platform])
  @@index([instagramAccountId])
  @@index([instagramStoryId])
}

model Claim {
  id        String   @id @default(cuid())
  dropId    String
  fid       Int
  address   String
  txHash    String?
  claimedAt DateTime @default(now())
  username  String?
  followers Int?
  drop      Drop     @relation(fields: [dropId], references: [id], onDelete: Cascade)

  @@unique([dropId, fid])
  @@index([dropId])
  @@index([fid])
}

model LumaDelivery {
  id          String   @id @default(cuid())
  dropId      String
  guestId     String
  email       String
  name        String
  poapLink    String
  sentAt      DateTime @default(now())
  checkedInAt DateTime?
  drop        Drop     @relation(fields: [dropId], references: [id], onDelete: Cascade)

  @@unique([dropId, guestId])
  @@index([dropId])
  @@index([email])
}

model LumaGuest {
  id               String   @id @default(cuid())
  dropId           String
  guestId          String
  email            String
  name             String
  firstName        String?
  lastName         String?
  registeredAt     DateTime
  checkedInAt      DateTime?
  ethAddress       String?
  solanaAddress    String?
  phoneNumber      String?
  geoCity          String?
  geoCountry       String?
  avatarUrl        String?
  twitterHandle    String?
  instagramHandle  String?
  linkedinHandle   String?
  website          String?
  approvalStatus   String?
  lastSyncedAt     DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  drop             Drop     @relation(fields: [dropId], references: [id], onDelete: Cascade)

  @@unique([dropId, guestId])
  @@index([dropId])
  @@index([email])
  @@index([checkedInAt])
}

model LumaCookie {
  id        String   @id @default(cuid())
  cookie    String   @db.Text
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isValid   Boolean  @default(true)
  
  @@index([createdAt])
}

model InstagramMessage {
  id          String   @id @default(cuid())
  messageId   String   @unique
  text        String
  senderId    String
  recipientId String
  timestamp   BigInt
  storyId     String?
  storyUrl    String?  @db.Text
  receivedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  processed   Boolean  @default(false)
  processedAt DateTime?
  dropId      String?
  delivery    InstagramDelivery?
  
  @@index([senderId])
  @@index([recipientId])
  @@index([timestamp])
  @@index([createdAt])
  @@index([processed])
  @@index([storyId])
  @@index([dropId])
}

model InstagramAccount {
  id           String   @id @default(cuid())
  instagramId  String   @unique
  username     String?
  accessToken  String   @db.Text
  tokenType    String   @default("bearer")
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  drops        Drop[]
  
  @@index([instagramId])
}

model InstagramDropMessages {
  id                String   @id @default(cuid())
  dropId            String   @unique
  successMessage    String   @db.Text // Message when POAP is delivered (contains {{recipient}} variable)
  alreadyClaimedMessage String @db.Text // Message when user already claimed
  invalidFormatMessage String @db.Text // Message when no valid email/ENS/address found
  drop              Drop     @relation(fields: [dropId], references: [id], onDelete: Cascade)
  
  @@index([dropId])
}

model InstagramDelivery {
  id             String   @id @default(cuid())
  dropId         String
  messageId      String   @unique
  recipientType  String   // "email", "ens", or "address"
  recipientValue String   // The actual email, ENS, or address
  poapLink       String?
  deliveryStatus String   @default("pending") // "pending", "delivered", "failed"
  errorMessage   String?
  deliveredAt    DateTime?
  createdAt      DateTime @default(now())
  drop           Drop     @relation(fields: [dropId], references: [id], onDelete: Cascade)
  message        InstagramMessage @relation(fields: [messageId], references: [messageId], onDelete: Cascade)
  
  @@unique([dropId, recipientValue, recipientType])
  @@index([dropId])
  @@index([messageId])
  @@index([deliveryStatus])
}
