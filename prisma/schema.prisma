generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  fid          Int?     @unique
  username     String
  displayName  String?
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  email        String?  @unique
  googleId     String?  @unique
  provider     String   @default("farcaster")
  drops        Drop[]
}

model AuthorizedUser {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?
  isAdmin   Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([isActive])
}

model Drop {
  id                  String                 @id @default(cuid())
  slug                String                 @unique @default(cuid())
  userId              String
  poapEventId         String
  poapSecretCode      String
  buttonColor         String                 @default("#0a5580")
  backgroundColor     String                 @default("#073d5c")
  logoUrl             String?
  mintMessage         String                 @default("This POAP celebrates the Farcaster community and our journey together.")
  requireFollow       Boolean                @default(true)
  followUsername      String?
  requireRecast       Boolean                @default(true)
  isActive            Boolean                @default(true)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  disclaimerMessage   String                 @default("By minting this POAP you accept these terms: https://poap.xyz/terms")
  requireQuote        Boolean                @default(false)
  deliveryMethod      String?
  emailBody           String?
  emailSubject        String?
  lumaEventId         String?
  lumaEventUrl        String?
  platform            String                 @default("farcaster")
  deliveryTarget      String                 @default("email")
  deliveredAt         DateTime?
  poapsDelivered      Boolean                @default(false)
  instagramAccountId  String?
  instagramStoryId    String?
  instagramStoryUrl   String?
  acceptedFormats     String[]               @default(["email"])
  sendPoapEmail       Boolean?               @default(true)
  isRealTime          Boolean                @default(false)
  claims              Claim[]
  instagramAccount    InstagramAccount?      @relation(fields: [instagramAccountId], references: [id])
  user                User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  instagramDeliveries InstagramDelivery[]
  instagramMessages   InstagramDropMessages?
  InstagramMessage    InstagramMessage[]
  lumaDeliveries      LumaDelivery[]
  lumaGuests          LumaGuest[]

  @@index([userId])
  @@index([slug])
  @@index([platform])
  @@index([instagramAccountId])
  @@index([instagramStoryId])
}

model Claim {
  id        String   @id @default(cuid())
  dropId    String
  fid       Int
  address   String
  txHash    String?
  claimedAt DateTime @default(now())
  username  String?
  followers Int?
  drop      Drop     @relation(fields: [dropId], references: [id], onDelete: Cascade)

  @@unique([dropId, fid])
  @@index([dropId])
  @@index([fid])
}

model LumaDelivery {
  id          String    @id @default(cuid())
  dropId      String
  guestId     String
  email       String
  name        String
  poapLink    String
  sentAt      DateTime  @default(now())
  checkedInAt DateTime?
  drop        Drop      @relation(fields: [dropId], references: [id], onDelete: Cascade)

  @@unique([dropId, guestId])
  @@index([dropId])
  @@index([email])
}

model LumaGuest {
  id              String    @id @default(cuid())
  dropId          String
  guestId         String
  email           String
  name            String
  firstName       String?
  lastName        String?
  registeredAt    DateTime
  checkedInAt     DateTime?
  ethAddress      String?
  solanaAddress   String?
  phoneNumber     String?
  geoCity         String?
  geoCountry      String?
  avatarUrl       String?
  twitterHandle   String?
  instagramHandle String?
  linkedinHandle  String?
  website         String?
  approvalStatus  String?
  lastSyncedAt    DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  drop            Drop      @relation(fields: [dropId], references: [id], onDelete: Cascade)

  @@unique([dropId, guestId])
  @@index([dropId])
  @@index([email])
  @@index([checkedInAt])
}

model LumaCookie {
  id        String    @id @default(cuid())
  cookie    String
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isValid   Boolean   @default(true)

  @@index([createdAt])
}

model InstagramMessage {
  id             String             @id @default(cuid())
  messageId      String             @unique
  text           String
  senderId       String
  recipientId    String
  timestamp      BigInt
  storyId        String?
  storyUrl       String?
  receivedAt     DateTime           @default(now())
  createdAt      DateTime           @default(now())
  processed      Boolean?           @default(false)
  processedAt    DateTime?
  dropId         String?
  senderUsername String?
  delivery       InstagramDelivery?
  Drop           Drop?              @relation(fields: [dropId], references: [id])

  @@index([senderId])
  @@index([recipientId])
  @@index([timestamp])
  @@index([createdAt])
  @@index([processed])
  @@index([storyId])
  @@index([dropId])
}

model InstagramAccount {
  id          String    @id @default(dbgenerated("(gen_random_uuid())::text"))
  instagramId String    @unique
  username    String?
  accessToken String
  tokenType   String    @default("bearer")
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  drops       Drop[]
  stories     InstagramStory[]

  @@index([instagramId])
}

model InstagramDropMessages {
  id                    String @id @default(dbgenerated("(gen_random_uuid())::text"))
  dropId                String @unique
  successMessage        String
  alreadyClaimedMessage String
  invalidFormatMessage  String
  drop                  Drop   @relation(fields: [dropId], references: [id], onDelete: Cascade)

  @@index([dropId])
}

model InstagramDelivery {
  id                String           @id @default(dbgenerated("(gen_random_uuid())::text"))
  dropId            String
  messageId         String           @unique
  recipientType     String
  recipientValue    String
  poapLink          String?
  deliveryStatus    String           @default("pending")
  errorMessage      String?
  deliveredAt       DateTime?
  createdAt         DateTime         @default(now())
  instagramUsername String?
  drop              Drop             @relation(fields: [dropId], references: [id], onDelete: Cascade)
  message           InstagramMessage @relation(fields: [messageId], references: [messageId], onDelete: Cascade)

  @@unique([dropId, recipientValue, recipientType])
  @@index([dropId])
  @@index([messageId])
  @@index([deliveryStatus])
}

model InstagramStory {
  id                String   @id @default(dbgenerated("(gen_random_uuid())::text"))
  accountId         String
  storyId           String   @unique
  mediaUrl          String
  mediaType         String
  timestamp         DateTime
  permalink         String
  imageData         String?  // Base64 encoded image data
  isHighlight       Boolean  @default(false)
  highlightTitle    String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  instagramAccount  InstagramAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([timestamp])
  @@index([isActive])
  @@index([storyId])
}
